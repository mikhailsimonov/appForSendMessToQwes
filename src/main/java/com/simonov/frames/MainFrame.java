package com.simonov.frames;

import com.simonov.utils.JMSutil;
import com.simonov.utils.KConsumer;
import com.simonov.utils.KProducer;

import javax.swing.*;

import java.util.Iterator;

import static com.simonov.utils.JMSutil.sendMessage;
import static com.simonov.utils.KConsumer.*;

/**
 * @author Simonov-MS
 */
public class MainFrame extends JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        jPanel1 = new JPanel();
        serverField = new JTextField();
        topicQwe = new JTextField();
        groupId = new JTextField();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        buttonPut = new JButton();
        buttonGet = new JButton();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jRadioButtonKafka = new JRadioButton();
        jRadioButtonIbm = new JRadioButton();
        jTextFieldJmsType = new JTextField();
        jLabel7 = new JLabel();
        jTextFieldPort = new JTextField();
        getListTopics = new JButton();
        jToggleButtonCommitOnOff = new JToggleButton();
        jToggleButtonClearQwe = new JToggleButton();
        fieldTimeForPool = new JTextField();
        fieldGiveUp = new JTextField();
        jLabel8 = new JLabel();
        jLabel9 = new JLabel();
        jScrollPane1 = new JScrollPane();
        responseWindow = new JTextArea();
        jScrollPane3 = new JScrollPane();
        messageWindow = new JTextArea();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChatBotQaUtils");

        jPanel1.setBorder(BorderFactory.createTitledBorder("QaUtil v.4.2"));
        serverField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverFieldActionPerformed(evt);
            }
        });

        groupId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupIdActionPerformed(evt);
            }
        });

        jLabel1.setText("server");

        jLabel2.setText("topic");

        jLabel3.setText("group id");

        buttonPut.setLabel("put");
        buttonPut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPutActionPerformed(evt);
            }
        });

        buttonGet.setText("get");
        buttonGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getActionPerformed(evt);
            }
        });

        jLabel4.setText("input");

        jLabel5.setText("output");

        jRadioButtonKafka.setText("Kafka");
        jRadioButtonKafka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonKafkaActionPerformed(evt);
            }
        });

        jRadioButtonIbm.setText("Ibm mq");
        jRadioButtonIbm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonIbmActionPerformed(evt);
            }
        });

        jTextFieldJmsType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldJmsTypeActionPerformed(evt);
            }
        });

        jLabel7.setText("jms type");

        jTextFieldPort.setText("9092");
        jTextFieldPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPortActionPerformed(evt);
            }
        });

        getListTopics.setText("get list topic");
        getListTopics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getListTopicsActionPerformed(evt);
            }
        });

        jToggleButtonCommitOnOff.setText("commit on/off");
        jToggleButtonCommitOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonCommitOnOffActionPerformed(evt);
            }
        });

        jToggleButtonClearQwe.setText("clear topic");
        jToggleButtonClearQwe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonClearQweActionPerformed(evt);
            }
        });

        fieldTimeForPool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldTimeForPoolActionPerformed(evt);
            }
        });

        fieldGiveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldGiveUpActionPerformed(evt);
            }
        });

        jLabel8.setText("polling time");

        jLabel9.setText("give up");

        responseWindow.setColumns(20);
        responseWindow.setRows(5);
        jScrollPane1.setViewportView(responseWindow);

        messageWindow.setColumns(20);
        messageWindow.setRows(5);
        jScrollPane3.setViewportView(messageWindow);

        jRadioButtonKafka.setSelected(true);
        jTextFieldJmsType.setEnabled(false);
        responseWindow.setEditable(false);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel5)
                                                        .addComponent(jLabel4)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(topicQwe)
                                                                                        .addComponent(groupId, GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                                                                                        .addComponent(serverField))
                                                                                .addGap(18, 18, 18)
                                                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                                .addComponent(jLabel1)
                                                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                                                .addComponent(jTextFieldPort, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE))
                                                                                        .addComponent(jLabel2)
                                                                                        .addComponent(jLabel3)
                                                                                        .addComponent(jLabel6)))
                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                .addComponent(jTextFieldJmsType, GroupLayout.PREFERRED_SIZE, 380, GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(jLabel7)))
                                                                .addGap(71, 71, 71)
                                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jRadioButtonKafka)
                                                                        .addComponent(jRadioButtonIbm, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                                                        .addComponent(fieldGiveUp, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                                                                                        .addComponent(fieldTimeForPool, GroupLayout.Alignment.LEADING))
                                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel8)
                                                                                        .addComponent(jLabel9)))))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 596, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(buttonPut, GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                                                        .addComponent(getListTopics, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(buttonGet, GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                                                        .addComponent(jToggleButtonCommitOnOff, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jToggleButtonClearQwe, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(serverField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(jRadioButtonKafka)
                                        .addComponent(jTextFieldPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(3, 3, 3)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(topicQwe, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(jRadioButtonIbm))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(groupId, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)
                                        .addComponent(fieldTimeForPool, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextFieldJmsType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7)
                                        .addComponent(fieldGiveUp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6)
                                                        .addComponent(buttonPut))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(getListTopics)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jToggleButtonCommitOnOff)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonGet)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jToggleButtonClearQwe))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 176, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel5)))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void buttonPutActionPerformed(java.awt.event.ActionEvent evt) {
        getActualServerName();
        getActualTopic();
        getActualGroupId();
        getActualJMSType();

        if (jRadioButtonIbm.isSelected()) {
            if (jTextFieldPort.getText().isEmpty() || topicQwe.getText().isEmpty() || serverField.getText().isEmpty() || messageWindow.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "fill in the required fields", "Alert", JOptionPane.INFORMATION_MESSAGE);
            }
            String p = jTextFieldPort.getText();
            Integer port = Integer.parseInt(p);
            JMSutil.putMessageToMq(serverField.getText(),
                    port,
                    topicQwe.getText(),
                    groupId.getText(),
                    jTextFieldJmsType.getText(),
                    messageWindow.getText());
            responseWindow.setText(sendMessage);
            buttonGet.getAction().setEnabled(false);


        } else if (jRadioButtonKafka.isSelected()) {
            if (topicQwe.getText().isEmpty() || serverField.getText().isEmpty() || groupId.getText().isEmpty() || jTextFieldPort.getText().isEmpty() || messageWindow.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "fill in the required fields", "Alert", JOptionPane.INFORMATION_MESSAGE);
            } else {
                KProducer.kafkaSend(serverField.getText() + ":" + jTextFieldPort.getText(), topicQwe.getText(), messageWindow.getText());
                responseWindow.setText("message flew into qwe successfully");
            }
        } else {
            if (topicQwe.getText().isEmpty() || serverField.getText().isEmpty() || groupId.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "fill in the required fields", "Alert", JOptionPane.INFORMATION_MESSAGE);
            } else {
                jRadioButtonKafka.setSelected(true);
                KProducer.kafkaSend(serverField.getText(), topicQwe.getText(), messageWindow.getText());
                responseWindow.setText("message flew into qwe successfully");
            }
        }
    }

    private void serverFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void groupIdActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void getActionPerformed(java.awt.event.ActionEvent evt) {
        getActualServerName();
        getActualTopic();
        getActualGroupId();

        jRadioButtonIbm.setSelected(false);
        responseWindow.setText("");
        String resp = KConsumer.runConsumer();
        responseWindow.append(resp + "\n\n----messages are read from the queue----");

    }

    private void jTextFieldChannelActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jRadioButtonIbmActionPerformed(java.awt.event.ActionEvent evt) {
        selector("ibm");
    }

    private void jRadioButtonKafkaActionPerformed(java.awt.event.ActionEvent evt) {
        selector("kafka");
    }

    private void jTextFieldJmsTypeActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextFieldPortActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }


    private void getListTopicsActionPerformed(java.awt.event.ActionEvent evt) {

        getActualServerName();
        if(serverField.getText().isEmpty() || jTextFieldPort.getText().isEmpty() || qweServer.equals("port")){
            JOptionPane.showMessageDialog(null, "fill in the required fields server or port!", "Alert", JOptionPane.INFORMATION_MESSAGE);
        }else {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    getActualServerName();
                    responseWindow.setText("");
                    getTopics();
                    Iterator<String> iterator = topicsList.iterator();
                    while (iterator.hasNext()) {
                        String tcs = iterator.next();
                        if(tcs.isEmpty()){
                            JOptionPane.showMessageDialog(null, "check that the required fields are filled in correctly", "INFO", JOptionPane.INFORMATION_MESSAGE);
                        }else{
                        responseWindow.append(tcs + "\n");
                    }}
                }
            }).start();
        }}

    private void jToggleButtonClearQweActionPerformed(java.awt.event.ActionEvent evt) {
        getActualServerName();
        getActualTopic();
        getActualGroupId();
        new Thread(new Runnable() {
            @Override
            public void run() {
                responseWindow.setText("");
                if (jToggleButtonClearQwe.isSelected()) {
                    if (topicQwe.getText().isEmpty() || serverField.getText().isEmpty() || groupId.getText().isEmpty()
                            || jTextFieldPort.getText().isEmpty() || fieldTimeForPool.getText().isEmpty() ||
                            fieldGiveUp.getText().isEmpty() && (fieldTimeForPool.getText().matches("[-+]?\\d+") && fieldGiveUp.getText().matches("[-+]?\\d+"))) {
                        jToggleButtonClearQwe.setSelected(false);

                        JOptionPane.showMessageDialog(null, "fill in the required fields or fields\n'pool' and 'giveUp' isn`t numeric", "Alert", JOptionPane.INFORMATION_MESSAGE);
                        selectorKafkaClearState("off");

                    } else {
                        if (jToggleButtonClearQwe.isSelected()) {
                            while (true) {
                                selectorKafkaClearState("on");
                                String resp = clearTopic(Integer.parseInt(fieldTimeForPool.getText()), Integer.parseInt(fieldGiveUp.getText()));
                                responseWindow.append(resp + "\n");
                                if (!jToggleButtonClearQwe.isSelected()) {
                                    break;
                                }
                            }
                            jToggleButtonClearQwe.setSelected(false);
                            selectorKafkaClearState("off");
                        }
                    }
                }
            }
        }).start();
    }

    public void getActualServerName(){
        qweServer = serverField.getText() + ":" + jTextFieldPort.getText();
        }

    public void getActualGroupId(){
        group1 = groupId.getText();
    }


    public void getActualTopic(){
        topic = topicQwe.getText();
    }

    public void getActualJMSType(){
        jTextFieldJmsType.getText();
    }


    private void fieldTimeForPoolActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void fieldGiveUpActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jToggleButtonCommitOnOffActionPerformed(java.awt.event.ActionEvent evt) {

        if (jToggleButtonCommitOnOff.isSelected()) {
            JOptionPane.showMessageDialog(null, "Thanks!\nCOMMIT ON", "INFO", JOptionPane.INFORMATION_MESSAGE);
            selectorCommit("on");
        } else {
            JOptionPane.showMessageDialog(null, "Thanks!\nCOMMIT OFF", "INFO", JOptionPane.INFORMATION_MESSAGE);
            selectorCommit("off");
        }
    }

    public void selector(String state) {

        if (state.equals("kafka")) {

            jRadioButtonIbm.setSelected(false);
            jTextFieldJmsType.setEnabled(false);
            jLabel7.setEnabled(false);
            buttonGet.setEnabled(true);
            jToggleButtonCommitOnOff.setEnabled(true);
            getListTopics.setEnabled(true);
            jLabel1.setText("server");
            jLabel2.setText("topic");
            jLabel3.setText("group id");
            jToggleButtonClearQwe.setEnabled(true);
            responseWindow.setEditable(false);
            fieldTimeForPool.setEnabled(true);
            fieldGiveUp.setEnabled(true);
            jTextFieldPort.setText("9092");
            serverField.setText("");
            jTextFieldJmsType.setText("");
            groupId.setText("");
            topicQwe.setText("");


        } else if (state.equals("ibm")) {

            jRadioButtonKafka.setSelected(false);
            jTextFieldPort.setEnabled(true);
            jTextFieldJmsType.setEnabled(true);
            jToggleButtonCommitOnOff.setEnabled(false);
            getListTopics.setEnabled(false);
            jLabel7.setEnabled(true);
            buttonGet.setEnabled(false);
            jLabel1.setText("server");
            jLabel2.setText("queue");
            jLabel3.setText("channel");
            jToggleButtonClearQwe.setEnabled(false);
            responseWindow.setEditable(false);
            fieldTimeForPool.setEnabled(false);
            fieldGiveUp.setEnabled(false);
            jTextFieldPort.setText("1414");
            serverField.setText("");
            jTextFieldJmsType.setText("");
            groupId.setText("");
            topicQwe.setText("");

        } else {
            jRadioButtonIbm.setSelected(false);
            jTextFieldJmsType.setEnabled(false);
            jLabel7.setEnabled(false);
            buttonGet.setEnabled(true);
            jToggleButtonCommitOnOff.setEnabled(true);
            getListTopics.setEnabled(true);
            jLabel1.setText("server");
            jLabel2.setText("topic");
            jLabel3.setText("group id");
            jToggleButtonClearQwe.setEnabled(true);
            responseWindow.setEditable(false);
            fieldTimeForPool.setEnabled(true);
            fieldGiveUp.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame frame = new MainFrame();
                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
                frame.setResizable(false);
            }

        });
    }

    // Variables declaration - do not modify
    private JButton buttonPut;
    private JButton buttonGet;
    private JTextField groupId;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JTextField serverField;
    private JTextField topicQwe;
    public static String qweServer;
    public static String group1;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JRadioButton jRadioButtonIbm;
    private JRadioButton jRadioButtonKafka;
    private JLabel jLabel7;
    private JTextField jTextFieldJmsType;
    private JTextField jTextFieldPort;
    private JButton getListTopics;
    private JToggleButton jToggleButtonCommitOnOff;
    private JTextField fieldGiveUp;
    private JTextField fieldTimeForPool;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JScrollPane jScrollPane3;
    private JTextArea responseWindow;
    private JTextArea messageWindow;
    private JToggleButton jToggleButtonClearQwe;
    // End of variables declaration
}